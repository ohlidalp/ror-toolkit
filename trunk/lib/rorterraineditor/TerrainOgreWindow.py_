#Thomas Fischer 31/05/2007, thomas@thomasfischer.biz
import wx 
import ogre.renderer.OGRE as ogre 
from wxogre.OgreManager import *
from wxogre.wxOgreWindow import *
from random import random

class TerrainOgreWindow(wxOgreWindow): 
    def __init__(self, parent, ID, size = wx.Size(200,200), renderSystem = "OpenGL", **kwargs): 
        self.rand = str(random())
        wxOgreWindow.__init__(self, parent, ID, size = size, renderSystem = renderSystem, **kwargs) 
        self.parent = parent
    
    def OnFrameStarted(self): 
        if not self.camAxesNode is None:
            self.camAxesNode.setPosition(self.camera.getPosition())
            self.camAxesNode.setOrientation(self.camera.getOrientation())
            #self.camAxesEnt.setVisible(False)
        
        return 

            
    def OnFrameEnded(self): 
        #self.camAxesEnt.setVisible(True)
        return 

    def SceneInitialisation(self, add = None):
        # only init things in the main window, not in shared ones!
        # setup resources 
        if not add is None:
            for r in add:
                ogre.ResourceGroupManager.getSingleton().addResourceLocation(r, "FileSystem", "General", False)

        ogre.ResourceGroupManager.getSingleton().addResourceLocation("media/packs/OgreCore.zip", "Zip", "Bootstrap", False)
        ogre.ResourceGroupManager.getSingleton().addResourceLocation("media", "FileSystem", "General", False)
        ogre.ResourceGroupManager.getSingleton().addResourceLocation("media/materials", "FileSystem", "General", False)
        ogre.ResourceGroupManager.getSingleton().addResourceLocation("media/models", "FileSystem", "General", False)
        ogre.ResourceGroupManager.getSingleton().initialiseAllResourceGroups() 

        #get the scenemanager
        self.sceneManager = getOgreManager().createSceneManager(ogre.ST_EXTERIOR_CLOSE)

        # create a camera
        self.camera = self.sceneManager.createCamera('Camera' + self.rand) 
        self.camera.lookAt(ogre.Vector3(0, 0, 0)) 
        self.camera.setPosition(ogre.Vector3(0, 0, 100))
        self.camera.nearClipDistance = 0.1
        self.camera.setAutoAspectRatio(True) 

        # create the Viewport"
        self.viewport = self.renderWindow.addViewport(self.camera, 0, 0.0, 0.0, 1.0, 1.0) 
        self.viewport.backgroundColour = ogre.ColourValue(0, 0, 0) 

        #set some default values
        self.sceneDetailIndex = 0
        self.filtering = ogre.TFO_BILINEAR

        # bind mouse and keyboard
        self.Bind(wx.EVT_KEY_DOWN, self.onKeyDown) 
        self.Bind(wx.EVT_MOUSE_EVENTS, self.onMouseEvent)
        
        #create objects
        self.populateScene()
        
        self.showDebugOverlay(False)

    def showDebugOverlay(self, show):
        """Turns the debug overlay (frame statistics) on or off."""
        overlay = ogre.OverlayManager.getSingleton().getByName('Core/DebugOverlay')
        try:
            if overlay is None:
                pass
            if show:
                overlay.show()
            else:
                overlay.hide()
        except:
            pass
    
    def populateScene(self):
        self.sceneManager.AmbientLight = 0.5, 0.5, 0.5

        l = self.sceneManager.createLight("MainLight" + self.rand)
        l.setPosition(20,80,50)
        fadeColour = (0.93, 0.86, 0.76)
        self.sceneManager.setFog(ogre.FOG_LINEAR, fadeColour, 0.001, 5000.0, 10000.0)
        self.renderWindow.getViewport(0).BackgroundColour = fadeColour

        self.sceneManager.setWorldGeometry('media/terrain.cfg')
        plane = ogre.Plane()
        plane.d = 5000
        plane.normal = -ogre.Vector3.UNIT_Y
    
        self.sceneManager.AmbientLight = ogre.ColourValue(0.7, 0.7, 0.7 )
        self.sceneManager.setShadowTechnique(ogre.ShadowTechnique.SHADOWTYPE_STENCIL_ADDITIVE);
        self.sceneManager.setSkyDome(True, 'Examples/CloudySky', 4.0, 8.0) 

        self.MainLight = self.sceneManager.createLight('MainLight') 
        self.MainLight.setPosition (ogre.Vector3(20, 80, 130))

        #create the camera Axes object
        self.camAxesNode = self.sceneManager.getRootSceneNode().createChildSceneNode("camaxes" + self.rand) 
        self.camAxesEnt = self.sceneManager.createEntity('camAxesEnt' + self.rand, 'axes.mesh') 
        self.camAxesNode.attachObject(self.camAxesEnt) 
        
    
    
    def onKeyDown(self,event):
        #print event.m_keyCode
        d = 5
        if event.ShiftDown():
            d = 30

        if event.m_keyCode == 65: # A, wx.WXK_LEFT:
            self.camera.moveRelative(ogre.Vector3(-d,0,0))
        elif event.m_keyCode == 68: # D, wx.WXK_RIGHT:
            self.camera.moveRelative(ogre.Vector3(d,0,0))       
        elif event.m_keyCode == 87: # W ,wx.WXK_UP:
            self.camera.moveRelative(ogre.Vector3(0,0,-d))
        elif event.m_keyCode == 83: # S, wx.WXK_DOWN:
            self.camera.moveRelative(ogre.Vector3(0,0,d))
        elif event.m_keyCode == wx.WXK_PAGEUP:
            self.camera.moveRelative(ogre.Vector3(0,d,0))
        elif event.m_keyCode == wx.WXK_PAGEDOWN:
            self.camera.moveRelative(ogre.Vector3(0,-d,0))
        elif event.m_keyCode == 84: # 84 = T
            if self.filtering == ogre.TFO_BILINEAR:
                self.filtering = ogre.TFO_TRILINEAR
                self.Aniso = 1
            elif self.filtering == ogre.TFO_TRILINEAR:
                self.filtering = ogre.TFO_ANISOTROPIC
                self.Aniso = 8
            else:
                self.filtering = ogre.TFO_BILINEAR
                self.Aniso = 1
            ogre.MaterialManager.getSingleton().setDefaultTextureFiltering(self.filtering)
            ogre.MaterialManager.getSingleton().setDefaultAnisotropy(self.Aniso)
        elif event.m_keyCode == 82: # 82 = R
            detailsLevel = [ ogre.PM_SOLID,
                             ogre.PM_WIREFRAME,
                             ogre.PM_POINTS ]
            self.sceneDetailIndex = (self.sceneDetailIndex + 1) % len(detailsLevel)
            self.camera.polygonMode=detailsLevel[self.sceneDetailIndex]
        elif event.m_keyCode == 80: # 80 = P
            pos = self.camera.getDerivedPosition()
            o = self.camera.getDerivedOrientation()
            print "P: %.3f %.3f %.3f O: %.3f %.3f %.3f %.3f" % (pos.x,pos.y,pos.z, o.w,o.x,o.y,o.z)
              
        event.Skip()  
    
    def onMouseEvent(self, event):
        self.SetFocus() #Gives Keyboard focus to the window 
        
        
        if event.RightDown(): #Precedes dragging 
            self.StartDragX, self.StartDragY = event.GetPosition() #saves position of initial click 
        if event.GetWheelRotation() != 0:
            zfactor = 0.1
            if event.ShiftDown():
                zfactor = 5
            zoom = zfactor * -event.GetWheelRotation()
            self.camera.moveRelative(ogre.Vector3(0,0, zoom))
        if event.Dragging() and event.RightIsDown() and event.ControlDown():
            x,y = event.GetPosition() 
            dx = self.StartDragX - x
            dy = self.StartDragY - y
            self.StartDragX, self.StartDragY = x, y 
            if event.ShiftDown():
                dx = float(dx) / 10
                dy = float(dy) / 10
            self.camera.moveRelative(ogre.Vector3(dx,-dy,0))
        elif event.Dragging() and event.RightIsDown(): #Dragging with RMB 
            x,y = event.GetPosition() 
            dx = self.StartDragX - x
            dy = self.StartDragY - y
            self.StartDragX, self.StartDragY = x, y 
        
            self.camera.yaw(ogre.Degree(dx/3.0)) 
            self.camera.pitch(ogre.Degree(dy/3.0)) 
        event.Skip()
       